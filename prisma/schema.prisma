// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String
  phone              String
  email              String               @unique
  password           String
  birthDate          DateTime             @db.Date
  verified           Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  AppointmentsLashes AppointmentsLashes[]
  AppointmentsNails  AppointmentsNails[]
  AppointmentsBrows  AppointmentsBrows[]
}

model GoogleUser {
  id                 String               @id @default(uuid())
  profile            Json?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  AppointmentsLashes AppointmentsLashes[]
  AppointmentsNails  AppointmentsNails[]
  AppointmentsBrows  AppointmentsBrows[]
}

model Admin {
  id         String   @id @default(uuid())
  username   String
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Service {
  Lashes
  Brows
  Nails
}

model Master {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String
  email              String               @unique
  contact            String
  birthDate          DateTime             @db.Date
  description        String?              @db.Text
  thumbnail          String
  services           Service[]
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  AppointmentsLashes AppointmentsLashes[]
  AppointmentsNails  AppointmentsNails[]
  AppointmentsBrows  AppointmentsBrows[]
}

enum Status {
  PENDING
  APPROVED
  DENIED
}

model AppointmentsBrows {
  id           String      @id @default(uuid())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?
  googleUser   GoogleUser? @relation(fields: [googleUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  googleUserId String?
  master       Master      @relation(fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  masterId     String

  time        DateTime @db.Time()
  date        DateTime @db.Date
  phone       String
  description String?
  status      Status   @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AppointmentsLashes {
  id           String      @id @default(uuid())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?
  googleUser   GoogleUser? @relation(fields: [googleUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  googleUserId String?
  master       Master      @relation(fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  masterId     String

  time        DateTime @db.Time()
  date        DateTime @db.Date
  phone       String
  description String?
  status      Status   @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AppointmentsNails {
  id           String      @id @default(uuid())
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String?
  googleUser   GoogleUser? @relation(fields: [googleUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  googleUserId String?
  master       Master      @relation(fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  masterId     String

  time        DateTime @db.Time()
  date        DateTime @db.Date
  phone       String
  description String?
  status      Status   @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
